// Setup
#include <MaxMatrix.h>
#include <avr/pgmspace.h>
PROGMEM const char CH[] = {

  3, 8, B00000000, B00000000, B00000000, B00000000, B00000000,  // space

  1, 8, B01011111, B00000000, B00000000, B00000000, B00000000,  // !

  3, 8, B00000011, B00000000, B00000011, B00000000, B00000000,  // "

  5, 8, B00010100, B00111110, B00010100, B00111110, B00010100,  // #

  4, 8, B00100100, B01101010, B00101011, B00010010, B00000000,  // $

  5, 8, B01100011, B00010011, B00001000, B01100100, B01100011,  // %

  5, 8, B00110110, B01001001, B01010110, B00100000, B01010000,  // &

  1, 8, B00000011, B00000000, B00000000, B00000000, B00000000,  // '

  3, 8, B00011100, B00100010, B01000001, B00000000, B00000000,  // (

  3, 8, B01000001, B00100010, B00011100, B00000000, B00000000,  // )

  5, 8, B00101000, B00011000, B00001110, B00011000, B00101000,  // *

  5, 8, B00001000, B00001000, B00111110, B00001000, B00001000,  // +

  2, 8, B10110000, B01110000, B00000000, B00000000, B00000000,  // ,

  4, 8, B00001000, B00001000, B00001000, B00001000, B00000000,  // -

  2, 8, B01100000, B01100000, B00000000, B00000000, B00000000,  // .

  4, 8, B01100000, B00011000, B00000110, B00000001, B00000000,  // /

  4, 8, B00111110, B01000001, B01000001, B00111110, B00000000,  // 0

  3, 8, B01000010, B01111111, B01000000, B00000000, B00000000,  // 1

  4, 8, B01100010, B01010001, B01001001, B01000110, B00000000,  // 2

  4, 8, B00100010, B01000001, B01001001, B00110110, B00000000,  // 3

  4, 8, B00011000, B00010100, B00010010, B01111111, B00000000,  // 4

  4, 8, B00100111, B01000101, B01000101, B00111001, B00000000,  // 5

  4, 8, B00111110, B01001001, B01001001, B00110000, B00000000,  // 6

  4, 8, B01100001, B00010001, B00001001, B00000111, B00000000,  // 7

  4, 8, B00110110, B01001001, B01001001, B00110110, B00000000,  // 8

  4, 8, B00000110, B01001001, B01001001, B00111110, B00000000,  // 9

  2, 8, B01010000, B00000000, B00000000, B00000000, B00000000,  // :

  2, 8, B10000000, B01010000, B00000000, B00000000, B00000000,  // ;

  3, 8, B00010000, B00101000, B01000100, B00000000, B00000000,  // <

  3, 8, B00010100, B00010100, B00010100, B00000000, B00000000,  // =

  3, 8, B01000100, B00101000, B00010000, B00000000, B00000000,  // >

  4, 8, B00000010, B01011001, B00001001, B00000110, B00000000,  // ?

  5, 8, B00111110, B01001001, B01010101, B01011101, B00001110,  // @

  4, 8, B01111110, B00010001, B00010001, B01111110, B00000000,  // A

  4, 8, B01111111, B01001001, B01001001, B00110110, B00000000,  // B

  4, 8, B00111110, B01000001, B01000001, B00100010, B00000000,  // C

  4, 8, B01111111, B01000001, B01000001, B00111110, B00000000,  // D

  4, 8, B01111111, B01001001, B01001001, B01000001, B00000000,  // E

  4, 8, B01111111, B00001001, B00001001, B00000001, B00000000,  // F

  4, 8, B00111110, B01000001, B01001001, B01111010, B00000000,  // G

  4, 8, B01111111, B00001000, B00001000, B01111111, B00000000,  // H

  3, 8, B01000001, B01111111, B01000001, B00000000, B00000000,  // I

  4, 8, B00110000, B01000000, B01000001, B00111111, B00000000,  // J

  4, 8, B01111111, B00001000, B00010100, B01100011, B00000000,  // K

  4, 8, B01111111, B01000000, B01000000, B01000000, B00000000,  // L

  5, 8, B01111111, B00000010, B00001100, B00000010, B01111111,  // M

  5, 8, B01111111, B00000100, B00001000, B00010000, B01111111,  // N

  4, 8, B00111110, B01000001, B01000001, B00111110, B00000000,  // O

  4, 8, B01111111, B00001001, B00001001, B00000110, B00000000,  // P

  4, 8, B00111110, B01000001, B01000001, B10111110, B00000000,  // Q

  4, 8, B01111111, B00001001, B00001001, B01110110, B00000000,  // R

  4, 8, B01000110, B01001001, B01001001, B00110010, B00000000,  // S

  5, 8, B00000001, B00000001, B01111111, B00000001, B00000001,  // T

  4, 8, B00111111, B01000000, B01000000, B00111111, B00000000,  // U

  5, 8, B00001111, B00110000, B01000000, B00110000, B00001111,  // V

  5, 8, B00111111, B01000000, B00111000, B01000000, B00111111,  // W

  5, 8, B01100011, B00010100, B00001000, B00010100, B01100011,  // X

  5, 8, B00000111, B00001000, B01110000, B00001000, B00000111,  // Y

  4, 8, B01100001, B01010001, B01001001, B01000111, B00000000,  // Z

  2, 8, B01111111, B01000001, B00000000, B00000000, B00000000,  // [

  4, 8, B00000001, B00000110, B00011000, B01100000, B00000000,  // \ backslash

  2, 8, B01000001, B01111111, B00000000, B00000000, B00000000,  // ]

  3, 8, B00000010, B00000001, B00000010, B00000000, B00000000,  // hat

  4, 8, B01000000, B01000000, B01000000, B01000000, B00000000,  // _

  2, 8, B00000001, B00000010, B00000000, B00000000, B00000000,  // `

  4, 8, B00100000, B01010100, B01010100, B01111000, B00000000,  // a

  4, 8, B01111111, B01000100, B01000100, B00111000, B00000000,  // b

  4, 8, B00111000, B01000100, B01000100, B00101000, B00000000,  // c

  4, 8, B00111000, B01000100, B01000100, B01111111, B00000000,  // d

  4, 8, B00111000, B01010100, B01010100, B00011000, B00000000,  // e

  3, 8, B00000100, B01111110, B00000101, B00000000, B00000000,  // f

  4, 8, B10011000, B10100100, B10100100, B01111000, B00000000,  // g

  4, 8, B01111111, B00000100, B00000100, B01111000, B00000000,  // h

  3, 8, B01000100, B01111101, B01000000, B00000000, B00000000,  // i

  4, 8, B01000000, B10000000, B10000100, B01111101, B00000000,  // j

  4, 8, B01111111, B00010000, B00101000, B01000100, B00000000,  // k

  3, 8, B01000001, B01111111, B01000000, B00000000, B00000000,  // l

  5, 8, B01111100, B00000100, B01111100, B00000100, B01111000,  // m

  4, 8, B01111100, B00000100, B00000100, B01111000, B00000000,  // n

  4, 8, B00111000, B01000100, B01000100, B00111000, B00000000,  // o

  4, 8, B11111100, B00100100, B00100100, B00011000, B00000000,  // p

  4, 8, B00011000, B00100100, B00100100, B11111100, B00000000,  // q

  4, 8, B01111100, B00001000, B00000100, B00000100, B00000000,  // r

  4, 8, B01001000, B01010100, B01010100, B00100100, B00000000,  // s

  3, 8, B00000100, B00111111, B01000100, B00000000, B00000000,  // t

  4, 8, B00111100, B01000000, B01000000, B01111100, B00000000,  // u

  5, 8, B00011100, B00100000, B01000000, B00100000, B00011100,  // v

  5, 8, B00111100, B01000000, B00111100, B01000000, B00111100,  // w

  5, 8, B01000100, B00101000, B00010000, B00101000, B01000100,  // x

  4, 8, B10011100, B10100000, B10100000, B01111100, B00000000,  // y

  3, 8, B01100100, B01010100, B01001100, B00000000, B00000000,  // z

  3, 8, B00001000, B00110110, B01000001, B00000000, B00000000,  // {

  1, 8, B01111111, B00000000, B00000000, B00000000, B00000000,  // |

  3, 8, B01000001, B00110110, B00001000, B00000000, B00000000,  // }

  4, 8, B00001000, B00000100, B00001000, B00000100, B00000000,  // ~

};
char skullEmoji[] = {
  8,
  8,
  B00001110,
  B00010001,
  B11100101,
  B10000001,
  B10000001,
  B11100101,
  B00010001,
  B00001110,
};  //ðŸ’€
int data = 12;
int load = 10;
int clock = 11;
int maxInUse = 1;
int currentState1;
int currentState2;
MaxMatrix m(data, load, clock, maxInUse);
const int buzzer = 6;
const int button1 = 3;
const int button2 = 4;
const int ic = 261;
const int id = 294;
const int ie = 329;
const int iaf = 349;
const int ig = 391;
const int igS = 415;
const int ia = 440;
const int iaS = 455;
const int ib = 466;
const int icH = 523;
const int icSH = 554;
const int idH = 587;
const int idSH = 622;
const int ieH = 659;
const int ifH = 698;
const int ifSH = 740;
const int igH = 784;
const int igSH = 830;
const int iaH = 880;
char idlestring[] = " no clue what else to add!  ";  //idle text (leave 2 spaces after for text to fully clear before it repeats)
char string1[] = " Hello world! ";
char string2[] = " Now playing: ";
char string3[] = "Imperial March   ";
byte buffer[10];
void firstSection() {
  beep(ia, 500);
  beep(ia, 500);
  beep(ia, 500);
  beep(iaf, 350);
  beep(icH, 150);
  beep(ia, 500);
  beep(iaf, 350);
  beep(icH, 150);
  beep(ia, 650);
  delay(500);
  beep(ieH, 500);
  beep(ieH, 500);
  beep(ieH, 500);
  beep(ifH, 350);
  beep(icH, 150);
  beep(igS, 500);
  beep(iaf, 350);
  beep(icH, 150);
  beep(ia, 650);
  delay(500);
}

void secondSection() {
  beep(iaH, 500);
  beep(ia, 300);
  beep(ia, 150);
  beep(iaH, 500);
  beep(igSH, 325);
  beep(igH, 175);
  beep(ifSH, 125);
  beep(ifH, 125);
  beep(ifSH, 250);
  delay(325);
  beep(iaS, 250);
  beep(idSH, 500);
  beep(idH, 325);
  beep(icSH, 175);
  beep(icH, 125);
  beep(ib, 125);
  beep(icH, 250);
  delay(350);
}
void beep(int note, int duration) {
  tone(buzzer, note, duration);
  delay(duration);
  noTone(buzzer);
  delay(50);
}
void printCharWithShift(char c, int shift_speed) {
  if (c < 32) return;
  c -= 32;
  memcpy_P(buffer, CH + 7 * c, 7);
  m.writeSprite(maxInUse * 8, 0, buffer);
  m.setColumn(maxInUse * 8 + buffer[0], 0);
  for (int i = 0; i < buffer[0] + 1; i++) {
    delay(shift_speed);
    m.shiftLeft(false, false);
  }
}
void printStringWithShift(char* s, int shift_speed) {
  while (*s != 0) {
    printCharWithShift(*s, shift_speed);
    s++;
  }
}

void setup() {
  m.init();
  m.setIntensity(15);
  pinMode(buzzer, OUTPUT);
  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  Serial.begin(9600);
}

void buttonOne() {
  printStringWithShift(string2, 70);
  printStringWithShift(string3, 70);
  m.writeSprite(0, 0, skullEmoji);
  firstSection();
  secondSection();
  beep(iaf, 250);
  beep(igS, 500);
  beep(iaf, 350);
  beep(ia, 125);
  beep(icH, 500);
  beep(ia, 375);
  beep(icH, 125);
  beep(ieH, 650);
  delay(500);
  secondSection();
  beep(iaf, 250);
  beep(igS, 500);
  beep(iaf, 375);
  beep(icH, 125);
  beep(ia, 500);
  beep(iaf, 375);
  beep(icH, 125);
  beep(ia, 650);
  delay(650);
}


void buttonTwo() {
  printStringWithShift(string1, 70);

  beep(ia, 500);
}

void buttonBoth() {
  beep(ia, 1000);
}

void loop() {

  digitalWrite(button1, HIGH);
  digitalWrite(button2, HIGH);

  currentState1 = digitalRead(button1);
  currentState2 = digitalRead(button2);

  while (Serial.available() > 0) {
    byte c = Serial.read();
    Serial.println(c, DEC);
    printCharWithShift(c, 100);
  }

  m.shiftLeft(false, true);
  m.setIntensity(5);

  if (currentState1 == 0) {

    delay(50);

    if (currentState2 == 1) {
      buttonOne();

    } else {

      buttonBoth();
    }
  }

  if (currentState2 == 0) {

    delay(50);

    if (currentState1 == 1) {
      buttonTwo();
    } else {

      buttonBoth();
    }
  } else {
    printStringWithShift(idlestring, 70);
    delay(250);
  }

  delay(200);
}